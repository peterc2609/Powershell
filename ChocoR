# Detection and remediation script for Intune Win32 app

# Ensure Chocolatey is installed
if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
    Write-Host "Chocolatey is not installed. Installing Chocolatey..."
    Set-ExecutionPolicy Bypass -Scope Process -Force; 
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'));
} else {
    Write-Host "Chocolatey is already installed."
}

function Get-ChocoPackageVersion {
    param (
        [string]$packageName
    )
    $package = choco list --local-only $packageName | Select-String -Pattern $packageName
    if ($package) {
        $version = $package -replace '.*\|', ''
        return $version
    } else {
        return $null
    }
}

function Get-LatestChocoPackageVersion {
    param (
        [string]$packageName
    )
    $packageInfo = choco info $packageName
    $latestVersion = $packageInfo | Select-String -Pattern "$packageName\s+(\d+(\.\d+)+)" | ForEach-Object { $_.Matches[0].Groups[1].Value }
    if ($latestVersion) {
        return $latestVersion
    } else {
        return $null
    }
}

function Upgrade-Package {
    param (
        [string]$packageName
    )
    Write-Host "Upgrading $packageName..."
    choco upgrade $packageName -y
}

$requiredPackages = @("r.project", "rstudio", "rtools")
$allUpToDate = $true

foreach ($package in $requiredPackages) {
    $installedVersion = Get-ChocoPackageVersion -packageName $package
    $latestVersion = Get-LatestChocoPackageVersion -packageName $package

    if (-not $installedVersion) {
        Write-Host "$package is not installed. Installing..."
        Upgrade-Package -packageName $package
        $allUpToDate = $false
    } elseif ([version]$installedVersion -lt [version]$latestVersion) {
        Write-Host "$package is installed but not up-to-date. Installed version: $installedVersion, Latest version: $latestVersion"
        Upgrade-Package -packageName $package
        $allUpToDate = $false
    } else {
        Write-Host "$package is up-to-date. Installed version: $installedVersion, Latest version: $latestVersion"
    }
}

if ($allUpToDate) {
    Write-Host "All required packages are installed and up-to-date."
    exit 0  # Exit code 0 means the application is detected
} else {
    Write-Host "One or more required packages were installed or updated."
    exit 1  # Exit code 1 means the application was updated or installed
}
