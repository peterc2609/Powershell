Add-Type -AssemblyName System.Windows.Forms

# Create the main form
$form = New-Object System.Windows.Forms.Form
$form.Text = 'PowerShell Module Installer'
$form.Size = New-Object System.Drawing.Size(700,500)

# Create TabControl
$tabControl = New-Object System.Windows.Forms.TabControl
$tabControl.Location = New-Object System.Drawing.Point(10,10)
$tabControl.Size = New-Object System.Drawing.Size(670,450)

# Create Tabs
$tabSearch = New-Object System.Windows.Forms.TabPage
$tabSearch.Text = 'Search Modules'
$tabInstalled = New-Object System.Windows.Forms.TabPage
$tabInstalled.Text = 'Installed Modules'

# Add Tabs to TabControl
$tabControl.Controls.Add($tabSearch)
$tabControl.Controls.Add($tabInstalled)

# Adding controls to Search Modules Tab
# Label for Search Box
$searchLabel = New-Object System.Windows.Forms.Label
$searchLabel.Location = New-Object System.Drawing.Point(10,10)
$searchLabel.Size = New-Object System.Drawing.Size(650,40)
$searchLabel.Text = 'Please enter the name of the PowerShell module you require. A partial name is acceptable.'
$tabSearch.Controls.Add($searchLabel)

# Search box
$searchBox = New-Object System.Windows.Forms.TextBox
$searchBox.Location = New-Object System.Drawing.Point(10,50)
$searchBox.Size = New-Object System.Drawing.Size(260,20)
$tabSearch.Controls.Add($searchBox)

# Search button
$searchButton = New-Object System.Windows.Forms.Button
$searchButton.Location = New-Object System.Drawing.Point(280,50)
$searchButton.Size = New-Object System.Drawing.Size(100,20)
$searchButton.Text = 'Search'
$tabSearch.Controls.Add($searchButton)

# Label for Search Results
$resultsLabel = New-Object System.Windows.Forms.Label
$resultsLabel.Location = New-Object System.Drawing.Point(10,80)
$resultsLabel.Size = New-Object System.Drawing.Size(350,20)
$resultsLabel.Text = 'PowerShell Modules found:'
$tabSearch.Controls.Add($resultsLabel)

# Checkbox list for displaying search results
$checkedListBox = New-Object System.Windows.Forms.CheckedListBox
$checkedListBox.Location = New-Object System.Drawing.Point(10,100)
$checkedListBox.Size = New-Object System.Drawing.Size(350,280)
$checkedListBox.CheckOnClick = $true
$tabSearch.Controls.Add($checkedListBox)

# Add button to add selected modules to the collection
$addButton = New-Object System.Windows.Forms.Button
$addButton.Location = New-Object System.Drawing.Point(280,390)
$addButton.Size = New-Object System.Drawing.Size(80,20)
$addButton.Text = 'Add'
$tabSearch.Controls.Add($addButton)

# Label for Selected Modules
$selectedLabel = New-Object System.Windows.Forms.Label
$selectedLabel.Location = New-Object System.Drawing.Point(370,80)
$selectedLabel.Size = New-Object System.Drawing.Size(290,20)
$selectedLabel.Text = 'PowerShell modules selected for installation:'
$tabSearch.Controls.Add($selectedLabel)

# List box for displaying selected modules
$selectedListBox = New-Object System.Windows.Forms.ListBox
$selectedListBox.Location = New-Object System.Drawing.Point(370,100)
$selectedListBox.Size = New-Object System.Drawing.Size(290,280)
$tabSearch.Controls.Add($selectedListBox)

# Install button
$installButton = New-Object System.Windows.Forms.Button
$installButton.Location = New-Object System.Drawing.Point(580,390)
$installButton.Size = New-Object System.Drawing.Size(80,20)
$installButton.Text = 'Install'
$tabSearch.Controls.Add($installButton)

# Selected modules collection
$selectedModules = New-Object System.Collections.ArrayList

# Search Button Click Event
$searchButton.Add_Click({
    $checkedListBox.Items.Clear()
    $modules = Find-Module -Name "*$($searchBox.Text)*"
    foreach ($module in $modules) {
        $checkedListBox.Items.Add($module.Name)
    }
})

# Add Button Click Event
$addButton.Add_Click({
    foreach ($item in $checkedListBox.CheckedItems) {
        if ($selectedModules -notcontains $item) {
            $selectedModules.Add($item) | Out-Null
            $selectedListBox.Items.Add($item)
        }
    }
})

# Install Button Click Event
$installButton.Add_Click({
    foreach ($module in $selectedModules) {
        Install-Module -Name $module -Force -Scope CurrentUser
    }
    [System.Windows.Forms.MessageBox]::Show("Installation Complete")
})

# Adding controls to Installed Modules Tab
$showInstalledButton = New-Object System.Windows.Forms.Button
$showInstalledButton.Location = New-Object System.Drawing.Point(10,10)
$showInstalledButton.Size = New-Object System.Drawing.Size(160,30)
$showInstalledButton.Text = 'Show Installed Modules'
$tabInstalled.Controls.Add($showInstalledButton)

$installedModulesBox = New-Object System.Windows.Forms.CheckedListBox
$installedModulesBox.Location = New-Object System.Drawing.Point(10,50)
$installedModulesBox.Size = New-Object System.Drawing.Size(640,300)
$installedModulesBox.CheckOnClick = $true
$tabInstalled.Controls.Add($installedModulesBox)

$uninstallButton = New-Object System.Windows.Forms.Button
$uninstallButton.Location = New-Object System.Drawing.Point(10,360)
$uninstallButton.Size = New-Object System.Drawing.Size(160,30)
$uninstallButton.Text = 'Uninstall Selected Modules'
$tabInstalled.Controls.Add($uninstallButton)

# Show Installed Modules Button Click Event
$showInstalledButton.Add_Click({
    $installedModulesBox.Items.Clear()
    $installedModules = Get-Module -ListAvailable
    $installedModules | ForEach-Object { $installedModulesBox.Items.Add($_.Name) }
})

# Uninstall Button Click Event
$uninstallButton.Add_Click({
    foreach ($module in $installedModulesBox.CheckedItems) {
        Uninstall-Module -Name $module -Force
    }
    [System.Windows.Forms.MessageBox]::Show("Uninstallation Complete")
})

# Add TabControl to the form
$form.Controls.Add($tabControl)

# Show the form
$form.ShowDialog()
